// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
}

enum EntityType {
  LISTITEM
  LIST
  CATEGORY
}


model User {
  id              String       @id @default(uuid())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  name            String?
  surname         String?
  email           String       @unique
  confirmed       Boolean      @default(false)
  image           String?
  password        String
  gender          Gender?      
  darkTheme       Boolean      @default(false)
  categories      Category[]
  preferences     String[]
  lists           List[]       @relation("UserLists")
  changeLogs      ChangeLog[]
  sessions        Session[]
  signUpCode      SignUpCodes?  @relation(fields: [signUpCodeId], references: [id])
  signUpCodeId    String? @unique
  remindPass      UserRemindPassword?  @relation(fields: [remindPassId], references: [id])
  remindPassId    String? @unique
}

model SignUpCodes {
  id             String    @id @default(uuid())
  code           Int
  expiresAt      DateTime
  User           User?     @relation
  userId         String?
}

model UserRemindPassword {
  id             String    @id @default(uuid())
  expiresAt      DateTime
  User           User?     @relation
  userId         String?
}

model Session {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  userId            String    
  user              User      @relation(fields: [userId], references: [id])
  expiresAt         DateTime
  data              Json?

  @@unique([userId, expiresAt])
}


model List {
  id              String    @id @default(uuid())
  name            String
  createAt        DateTime  @default(now())
  lastChangeAt    DateTime  @default(now())
  settingColor    String?
  url             String?
  userId          String
  user            User      @relation("UserLists", fields: [userId], references: [id])
  elements        ListItem[]
  fromTemplate    Boolean     @default(false)
  tags            ListTags[]

  @@index([userId], name: "idx_userId")
}

model ListItem {
  id            Int       @id @default(autoincrement())
  name          String
  status        Boolean   @default(false)
  createAt      DateTime  @default(now())
  listId        String
  list          List      @relation(fields: [listId], references: [id])
  categories    Category[]

  @@index([listId], name: "idx_listId")
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  userId   String
  user     User       @relation(fields: [userId], references: [id])
  items    ListItem[]
}

model ChangeLog {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  action        ActionType    // np. "DELETE", "UPDATE"
  entityType    EntityType    // np. "LISTITEM", "LIST", "CATEGORY"
  entityId      Int           // ID encji, którą zmieniliśmy
  previousData  Json          // Dane przed zmianą
}

model Template {
  id            Int          @id @default(autoincrement())
  name          String                                      // np. "2 dni citybreak"
  start         Boolean      @default(false)                // jesli ma być ładowana po rejestracji
  settingColor  String
  tripLength    Int?                                        // liczba dni
  gender        Gender?                                     // lista dla płci
  listTypeId    Int                                         // rodzaj wycieczki, np. "citybreak"]
  listType      ListType   @relation(fields: [listTypeId], references: [id])
  elements      TemplateItem[] 
  tags          ListTags[]
}

model TemplateItem {
  id            Int       @id @default(autoincrement())
  name          String
  status        Boolean   @default(false)
  categories    TemplateCategory[]
  templateId    Int
  template      Template  @relation(fields: [templateId], references: [id])
}

model TemplateCategory {
  id       Int        @id @default(autoincrement())
  name     String
  items    TemplateItem[]
}

model ListType {
  id          Int          @id @default(autoincrement())
  name        String       // Nazwa typu, np. "SUMMER, WINTER, CAMPING, ACTIVE, TRAINING, OTHER"
  fullName    String       // Pełna nazwa np. "Wakacje letnie, Camping"
  templates   Template[]
}

model ListTags {
  id          Int          @id @default(autoincrement())
  tag         String
  list        List     @relation(fields: [listId], references: [id])
  listId      String
  template    Template @relation(fields: [templateId], references: [id])
  templateId  Int

  @@index([listId], name: "idx_listTags_listId")
  @@index([templateId], name: "idx_listTags_templateId")
}